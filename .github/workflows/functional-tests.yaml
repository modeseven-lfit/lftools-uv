---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: "Functional Tests"
# REQUIRED SECRETS (must be defined in repository secrets):
#   RTD_TOKEN          -> Populates [rtd] token
#   READ_GITHUB_TOKEN  -> Populates [github] token
#                         (read-only scope sufficient for listing)
#   NEXUS2_PASSWORD    -> Populates nexus.onap.org password
#                         (user assumed 'admin' unless overridden)
#   NEXUS3_PASSWORD    -> Populates nexus3.onap.org password
#                         (user assumed 'modesevenindustrialsolutions2')
#   CLOUDS_YAML        -> Multi-line OpenStack test clouds.yaml content
#   PUBLIC_CLOUDS_YAML -> Optional public-clouds.yaml
#                         (vendor profiles, e.g. vexxhost)
#
# Secrets injected into ephemeral lftools.ini and clouds.yaml
# for functional tests.
# DO NOT commit real credentials. Generated per run inside the workflow.

"on":
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test categories to run (comma-separated: 1,2,3)'
        required: false
        default: '1'
        type: string
      test_filter:
        description: 'Test filter substring (e.g., jenkins, ldap, nexus)'
        required: false
        default: ''
        type: string
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'lftools_uv/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'scripts/run_functional_tests.sh'
      - '.github/workflows/functional-tests.yaml'
  schedule:
    # Daily at 06:00 UTC (after dependency updates)
    - cron: '0 6 * * *'

permissions:
  contents: read

jobs:
  functional-test-matrix:
    name: "Functional Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core functionality (fast)
          - test_filter: "core"
            description: "Core CLI functionality"
            category: "1"

          # Help screens (fast)
          - test_filter: "help"
            description: "CLI help screens"
            category: "1"

          # Jenkins integration (requires external services)
          - test_filter: "jenkins"
            description: "Jenkins integration"
            category: "1"

          # Python-LDAP modernization validation
          - test_filter: "ldap"
            description: "LDAP modernization"
            category: "1"

          # Nexus integration (external services)
          - test_filter: "nexus"
            description: "Nexus repository integration"
            category: "1"

          # OpenStack integration (external services)
          - test_filter: "openstack"
            description: "OpenStack integration"
            category: "1"

          # GitHub integration (external services)
          - test_filter: "github"
            description: "GitHub integration"
            category: "1"

    env:
      TEST_CATEGORY: ${{ inputs.test_category || matrix.category }}
      TEST_FILTER: ${{ inputs.test_filter || matrix.test_filter }}
      VERBOSE: ${{ inputs.verbose && '1' || '0' }}
      OUTPUT_FORMAT: "json"
      # Environment variables for external service testing
      JENKINS_URL: "https://jenkins.onap.org/"
      NEXUS2_FQDN: "nexus.onap.org"
      NEXUS3_FQDN: "nexus3.onap.org"
      GITHUB_ORG: "onap"
      # OS_CLOUD is now aligned with provided CLOUDS_YAML secret
      OS_CLOUD: "ecompci"

    # yamllint disable rule:line-length
    steps:
      - name: "Harden Runner"
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: "Checkout"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Generate lftools.ini, clouds.yaml, and public-clouds.yaml"
        shell: bash
        env:
          RTD_TOKEN: "${{ secrets.RTD_TOKEN }}"
          GITHUB_TOKEN: "${{ secrets.READ_GITHUB_TOKEN }}"
          NEXUS2_PASSWORD: "${{ secrets.NEXUS2_PASSWORD }}"
          NEXUS3_PASSWORD: "${{ secrets.NEXUS3_PASSWORD }}"
          CLOUDS_YAML: "${{ secrets.CLOUDS_YAML }}"
          JENKINS_JOBS_INI: "${{ secrets.JENKINS_JOBS_INI }}"
        run: |
          set -euo pipefail
          CONFIG_DIR="${HOME}/.config/lftools"
          mkdir -p "${CONFIG_DIR}"
          INI_FILE="${CONFIG_DIR}/lftools.ini"

          echo "# Ephemeral lftools.ini (functional-tests job)" > "${INI_FILE}"
          echo "# Generated: $(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> "${INI_FILE}"

          # [rtd] section
          if [[ -n "${RTD_TOKEN:-}" ]]; then
            {
              echo "[rtd]"
              echo "token = ${RTD_TOKEN}"
              echo "endpoint = https://readthedocs.org/api/v3/"
              echo
            } >> "${INI_FILE}"
          fi

          # Write clouds.yaml if provided
          if [[ -n "${CLOUDS_YAML:-}" ]]; then
            OPENSTACK_DIR="${HOME}/.config/openstack"
            mkdir -p "${OPENSTACK_DIR}"
            printf "%s\n" "${CLOUDS_YAML}" > "${OPENSTACK_DIR}/clouds.yaml"
            echo "Wrote clouds.yaml"
            pattern='^  [a-zA-Z0-9_-]\+:'
            count=$(grep -c "$pattern" "${OPENSTACK_DIR}/clouds.yaml" || true)
            echo "Cloud definitions: ${count}"

            # Debug: Show cloud configuration (sanitized)
            echo "Available clouds:"
            grep "^  [a-zA-Z0-9_-]*:" "${OPENSTACK_DIR}/clouds.yaml" || true

            # Check if ecompci cloud exists
            if grep -q "^  ecompci:" "${OPENSTACK_DIR}/clouds.yaml"; then
              echo "✓ Found ecompci cloud configuration"
              # Show sanitized config structure (hide sensitive values)
              echo "ecompci cloud structure:"
              sed -n '/^  ecompci:/,/^  [a-zA-Z]/p' \
                "${OPENSTACK_DIR}/clouds.yaml" | \
                sed 's/password: .*/password: [REDACTED]/' | \
                sed 's/application_credential_secret: .*/application_credential_secret: [REDACTED]/' | \
                head -20
            else
              echo "❌ ecompci cloud configuration not found"
              echo "This will cause OpenStack tests to fail"
            fi

            # Export file path for subsequent steps (GitHub step-level)
            {
              echo "OS_CLIENT_CONFIG_FILE=${OPENSTACK_DIR}/clouds.yaml"
              echo "Configured OS_CLOUD=ecompci"
            } >> "$GITHUB_ENV"
          else
            echo "❌ No CLOUDS_YAML secret; OpenStack tests will fail."
            echo "Please ensure CLOUDS_YAML secret contains valid" \
                 " OpenStack configuration with:"
            echo "  - auth_url, username, password, project_name"
            echo "  - user_domain_name, project_domain_name (for v3 auth)"
            echo "  - region_name, identity_api_version"
          fi

          # Note: PUBLIC_CLOUDS_YAML removed - using explicit config in
          # CLOUDS_YAML instead

          # Write jenkins_jobs.ini if provided
          if [[ -n "${JENKINS_JOBS_INI:-}" ]]; then
            JENKINS_DIR="${HOME}/.config/jenkins_jobs"
            mkdir -p "${JENKINS_DIR}"
            printf "%s\n" "${JENKINS_JOBS_INI}" > \
              "${JENKINS_DIR}/jenkins_jobs.ini"
            echo "✓ Created jenkins_jobs.ini configuration"

            # Show available Jenkins sections (sanitized)
            echo "Available Jenkins configurations:"
            grep "^\[.*\]" "${JENKINS_DIR}/jenkins_jobs.ini" | \
              grep -v "\[job_builder\]" || true
          else
            echo "❌ No JENKINS_JOBS_INI secret; Jenkins tests may fail."
            echo "Please ensure JENKINS_JOBS_INI secret contains valid" \
                 " Jenkins configuration."
          fi

          # [github] section
          if [[ -n "${GITHUB_TOKEN:-}" ]]; then
            {
              echo "[github]"
              echo "token = ${GITHUB_TOKEN}"
              echo
            } >> "${INI_FILE}"
          fi

          # nexus.onap.org (Nexus2)
          if [[ -n "${NEXUS2_PASSWORD:-}" ]]; then
            {
              echo "[nexus.onap.org]"
              echo "username = admin"
              echo "password = ${NEXUS2_PASSWORD}"
              echo "endpoint = https://nexus.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          # nexus3.onap.org (Nexus3)
          if [[ -n "${NEXUS3_PASSWORD:-}" ]]; then
            {
              echo "[nexus3.onap.org]"
              echo "username = modesevenindustrialsolutions2"
              echo "password = ${NEXUS3_PASSWORD}"
              echo "endpoint = https://nexus3.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          echo "Generated lftools.ini with sections:"
          grep '^[[]' "${INI_FILE}" || true

      - name: "Install uv"
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7.1.2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Install system packages for python-ldap"
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libldap2-dev libsasl2-dev libssl-dev \
            libsasl2-modules gcc build-essential
          sudo rm -rf /var/lib/apt/lists/*


      - name: "Set up Python"
        run: uv python install 3.12

      - name: "Sync dependencies"
        run: uv sync --all-extras

      - name: "Run functional tests: ${{ matrix.description }}"
        id: functional-tests
        run: |
          set -euo pipefail

          # Create results directory
          mkdir -p functional-test-results

          # Use environment variables already set by workflow
          # TEST_CATEGORY and TEST_FILTER are already set in env section
          export OUTPUT_FORMAT="json"
          export VERBOSE="1"

          # Debug essential information
          echo "Running functional tests with filter: ${TEST_FILTER:-none}"
          echo "Test category: ${TEST_CATEGORY}"

          # Debug OpenStack configuration if running OpenStack tests
          if [[ "${TEST_FILTER:-}" == "openstack" ]]; then
            echo ""
            echo "=== OpenStack Configuration Debug ==="
            echo "OS_CLOUD: ${OS_CLOUD:-NOT_SET}"
            echo "OS_CLIENT_CONFIG_FILE: ${OS_CLIENT_CONFIG_FILE:-NOT_SET}"

            if [[ -f "${OS_CLIENT_CONFIG_FILE:-}" ]]; then
              echo "✓ clouds.yaml exists at: ${OS_CLIENT_CONFIG_FILE}"
              echo "File size: $(wc -c < "${OS_CLIENT_CONFIG_FILE}") bytes"

              # Test if we can parse the YAML and find our cloud
              if command -v python3 >/dev/null 2>&1; then
                echo "Testing cloud configuration parsing..."
                if python3 -c "import yaml; yaml.safe_load(open('${OS_CLIENT_CONFIG_FILE}'))" 2>/dev/null; then
                  echo "✓ clouds.yaml is valid YAML"
                else
                  echo "❌ clouds.yaml has YAML syntax errors"
                fi
              fi
            else
              echo "❌ clouds.yaml not found at:" \
                   " ${OS_CLIENT_CONFIG_FILE:-NOT_SET}"
            fi
            echo "====================================="
            echo ""
          fi

          # Make script executable (in case it's not)
          chmod +x scripts/run_functional_tests.sh

          # Run tests with proper output separation
          # Stderr goes to console, stdout (JSON) goes to file
          if ./scripts/run_functional_tests.sh \
              > functional-test-results/results.json; then
            echo "exit_code=0" >> "$GITHUB_OUTPUT"
            echo "Test execution completed successfully"
          else
            exit_code=$?
            echo "exit_code=1" >> "$GITHUB_OUTPUT"
            echo "Test execution failed with exit code: $exit_code"

            # Show some debug info on failure
            if [[ -f functional-test-results/results.json ]]; then
              file_size=$(wc -c < functional-test-results/results.json)
              echo "Results file exists (${file_size} bytes)"
            else
              echo "No results file generated"
            fi
          fi

          # Extract summary for step output
          if [[ -f functional-test-results/results.json ]]; then
            {
              echo "## Functional Test Results: ${{ matrix.description }}"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            # Parse JSON properly using jq-style extraction or grep
            # Extract test counts from actual JSON structure
            total=$(grep -o '"total":[0-9]*' \
              functional-test-results/results.json | \
              grep -o '[0-9]*' || echo "0")
            passed=$(grep -o '"passed":[0-9]*' \
              functional-test-results/results.json | \
              grep -o '[0-9]*' || echo "0")
            failed=$(grep -o '"failed":[0-9]*' \
              functional-test-results/results.json | \
              grep -o '[0-9]*' || echo "0")
            skipped=$(grep -o '"skipped":[0-9]*' \
              functional-test-results/results.json | \
              grep -o '[0-9]*' || echo "0")

            {
              echo "- **Total Tests**: $total"
              echo "- **Passed**: ✅ $passed"
              echo "- **Failed**: ❌ $failed"
              echo "- **Skipped**: ⏭️ $skipped"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            if [[ "$failed" -gt 0 ]]; then
              echo "❌ Some tests failed. Check logs for details." \
                >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$passed" -gt 0 ]]; then
              echo "✅ All tests passed!" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "⚠️ No tests were executed." >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "⚠️ No test results file found." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: "Upload test results"
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: functional-test-results-${{ matrix.test_filter }}
          path: |
            functional-test-results/
            .functional_logs/
          retention-days: 7
          if-no-files-found: warn

      - name: "Fail job if tests failed"
        if: steps.functional-tests.outputs.exit_code != '0'
        run: |
          echo "Functional tests failed for filter: ${{ matrix.test_filter }}"
          exit 1

  # Aggregate results job
  functional-test-summary:
    name: "Functional Test Summary"
    runs-on: ubuntu-latest
    needs: functional-test-matrix
    if: always()
    timeout-minutes: 5
    steps:
      - name: "Check matrix results"
        run: |
          {
            echo "## Overall Functional Test Results"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # Check if any jobs failed
          matrix_result="${{ needs.functional-test-matrix.result }}"
          if [[ "$matrix_result" == "failure" ]]; then
            {
              echo "❌ Some functional test categories failed."
              echo ""
              echo "Please check the individual job results above for details."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          elif [[ "$matrix_result" == "success" ]]; then
            {
              echo "✅ All functional test categories passed!"
              echo ""
              echo "The CLI functionality is working correctly across all"
              echo "tested categories."
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "⚠️ Some functional tests were cancelled or skipped."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

  # Security and compliance check (Category 1 tests only)
  security-baseline:
    name: "Security Baseline Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Harden Runner"
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: "Checkout"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Generate lftools.ini, clouds.yaml, and public-clouds.yaml"
        shell: bash
        env:
          RTD_TOKEN: "${{ secrets.RTD_TOKEN }}"
          GITHUB_TOKEN: "${{ secrets.READ_GITHUB_TOKEN }}"
          NEXUS2_PASSWORD: "${{ secrets.NEXUS2_PASSWORD }}"
          NEXUS3_PASSWORD: "${{ secrets.NEXUS3_PASSWORD }}"
          CLOUDS_YAML: "${{ secrets.CLOUDS_YAML }}"
        run: |
          set -euo pipefail
          CONFIG_DIR="${HOME}/.config/lftools"
          mkdir -p "${CONFIG_DIR}"
          INI_FILE="${CONFIG_DIR}/lftools.ini"
          {
            echo "# Ephemeral lftools.ini (security-baseline job)"
            echo "# Generated by workflow (security-baseline)"
            echo "# Generated: $(date -u '+%Y-%m-%dT%H:%M:%SZ')"
          } > "${INI_FILE}"

          if [[ -n "${RTD_TOKEN:-}" ]]; then
            {
              echo "[rtd]"
              echo "token = ${RTD_TOKEN}"
              echo "endpoint = https://readthedocs.org/api/v3/"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${GITHUB_TOKEN:-}" ]]; then
            {
              echo "[github]"
              echo "token = ${GITHUB_TOKEN}"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${NEXUS2_PASSWORD:-}" ]]; then
            {
              echo "[nexus.onap.org]"
              echo "username = admin"
              echo "password = ${NEXUS2_PASSWORD}"
              echo "endpoint = https://nexus.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${NEXUS3_PASSWORD:-}" ]]; then
            {
              echo "[nexus3.onap.org]"
              echo "username = modesevenindustrialsolutions2"
              echo "password = ${NEXUS3_PASSWORD}"
              echo "endpoint = https://nexus3.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${CLOUDS_YAML:-}" ]]; then
            OPENSTACK_DIR="${HOME}/.config/openstack"
            mkdir -p "${OPENSTACK_DIR}"
            printf "%s\n" "${CLOUDS_YAML}" > "${OPENSTACK_DIR}/clouds.yaml"
            echo "Wrote clouds.yaml (security-baseline)."
            {
              echo "OS_CLIENT_CONFIG_FILE=${OPENSTACK_DIR}/clouds.yaml"
              echo "Configured OS_CLOUD=ecompci"
            } >> "$GITHUB_ENV"
          else
            echo "No CLOUDS_YAML secret provided (security-baseline job)."
          fi

          # Write public-clouds.yaml if GitHub variable provided
          if [[ -n "${PUBLIC_CLOUDS_YAML:-}" ]]; then
            OPENSTACK_DIR="${HOME}/.config/openstack"
            mkdir -p "${OPENSTACK_DIR}"
            printf "%s\n" "${PUBLIC_CLOUDS_YAML}" \
              > "${OPENSTACK_DIR}/public-clouds.yaml"
            echo "Wrote public-clouds.yaml"
            echo "(vendor profiles; security-baseline)"
          else
            echo "No PUBLIC_CLOUDS_YAML variable defined"
            echo "(security-baseline)"
          fi

          if [[ -n "${RTD_TOKEN:-}" ]]; then
            {
              echo "[rtd]"
              echo "token = ${RTD_TOKEN}"
              echo "endpoint = https://readthedocs.org/api/v3/"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${GITHUB_TOKEN:-}" ]]; then
            {
              echo "[github]"
              echo "token = ${GITHUB_TOKEN}"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${NEXUS2_PASSWORD:-}" ]]; then
            {
              echo "[nexus.onap.org]"
              echo "username = admin"
              echo "password = ${NEXUS2_PASSWORD}"
              echo "endpoint = https://nexus.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          if [[ -n "${NEXUS3_PASSWORD:-}" ]]; then
            {
              echo "[nexus3.onap.org]"
              echo "username = modesevenindustrialsolutions2"
              echo "password = ${NEXUS3_PASSWORD}"
              echo "endpoint = https://nexus3.onap.org/"
              echo
            } >> "${INI_FILE}"
          fi

          echo "Generated sections:"
          grep '^[[]' "${INI_FILE}" || true

      - name: "Install uv"
        uses: astral-sh/setup-uv@85856786d1ce8acfbcc2f13a5f3fbd6b938f9f41 # v7.1.2
        with:
          enable-cache: true

      - name: "Install system packages for python-ldap"
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libldap2-dev libsasl2-dev libssl-dev \
            libsasl2-modules gcc build-essential
          sudo rm -rf /var/lib/apt/lists/*

      - name: "Security check: No Category 2/3 tests in default run"
        run: |
          # Ensure that only Category 1 (harmless) tests run by default
          if grep -E ":::[23]:::" scripts/run_functional_tests.sh | \
              grep -v "^#"; then
            {
              echo "❌ Found uncommented Category 2 or 3 tests in"
              echo "functional test script!"
              echo "Only Category 1 (harmless/read-only) tests should be"
              echo "enabled by default."
            }
            exit 1
          else
            echo "✅ Only Category 1 (harmless) tests are enabled by"
            echo "default."
          fi

      - name: "Dependency audit"
        run: |
          # Pin Python version to ensure deterministic native builds
          # (python-ldap)
          uv python install 3.12
          uv sync --all-extras
          # Run basic security checks on the environment for functional tests
          uv run python3 -c "
          import sys
          print(f'Python version: {sys.version}')

          # Check that our modernized dependencies are properly installed
          try:
              import ldap
              print(f'python-ldap version: {ldap.__version__}')
              from packaging import version
              if version.parse(ldap.__version__) >= \
                  version.parse('3.4.0'):
                  print('✅ python-ldap modernization verified')
              else:
                  print('❌ python-ldap version too old')
                  sys.exit(1)
          except ImportError:
              print('⚠️ python-ldap not installed (ldap extra not used)')

          print('✅ Dependency audit passed')
          "
