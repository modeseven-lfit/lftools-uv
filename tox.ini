# SPDX-License-Identifier: EPL-1.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

[tox]
envlist =
    docs,
    docs-linkcheck,
    license,
    pre-commit,
    py38,
    py39,
    py310,
    py311,
    py312,
    py313
minversion = 4.0
skip_missing_interpreters = true
ignore_basepython_conflict = true
package_env = build

# pytest configuration is now in pyproject.toml

[testenv]
basepython = python3
extras = test
commands = pytest


[testenv:build]
description = Build the package using hatchling
skip_install = True
deps = build[virtualenv]
commands = python -m build {posargs}

[testenv:clean]
description = Remove old distribution files and temporary build artifacts
skip_install = True
allowlist_externals = python
commands =
    python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path(".").glob("*.egg-info")]'


[testenv:docs]
description = Build the documentation with sphinx
basepython = python3
extras = docs,openstack
commands = sphinx-build -b html -n -d {envtmpdir}/doctrees ./docs/ {toxinidir}/docs/_build/html

[testenv:docs-linkcheck]
description = Check the documentation links with sphinx
basepython = python3
extras = docs,openstack
commands = sphinx-build -W -b linkcheck -d {envtmpdir}/doctrees ./docs/ {toxinidir}/docs/_build/linkcheck

[testenv:latest-upstream]
description = Upstream (baseline locked/pinned) test run using current uv.lock
basepython = python3
extras = test
deps =
    python-jenkins
    requests
commands = pytest
[testenv:latest-permissive]
description = Experimental: eager-upgrade newest available versions (ignores upper bounds) to forecast future breaks
basepython = python3
extras = test
deps =
    pip
commands =
    pip install --upgrade --upgrade-strategy eager '.[test]'
    pytest


[testenv:license]
description = Check all files for license header
basepython = python3
commands =
    lftools-uv license check-dir lftools_uv
    lftools-uv license check-dir -r '.+' shell

[testenv:pre-commit]
description = Precommit checks for black, gitlint, etc.
basepython = python3
allowlist_externals = /bin/sh
extras = dev
passenv = HOME
commands =
    pre-commit run --all-files --show-diff-on-failure
    /bin/sh -c 'if ! git config --get user.name > /dev/null; then \
        git config --global --add user.name "CI"; \
        touch .git/REMOVE_USERNAME; fi'
    /bin/sh -c 'if ! git config --get user.email > /dev/null; then \
        git config --global --add user.email "ci@example.org"; \
        touch .git/REMOVE_USEREMAIL; fi'
    /bin/sh -c "if [ -f .git/COMMIT_EDITMSG ]; then \
        cp .git/COMMIT_EDITMSG .git/COMMIT_MSGTOX; else \
        git log HEAD -n1 --pretty=%B > .git/COMMIT_MSGTOX; fi"
    pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_MSGTOX
    /bin/sh -c "rm -f .git/COMMIT_MSGTOX"
    /bin/sh -c "if [ -f .git/REMOVE_USERNAME ]; then \
        git config --global --unset user.name; \
        rm -f .git/REMOVE_USERNAME; fi"
    /bin/sh -c "if [ -f .git/REMOVE_USEREMAIL ]; then \
        git config --global --unset user.email; \
        rm -f .git/REMOVE_USEREMAIL; fi"


[testenv:publish]
description = Publish the package to PyPI using twine
skip_install = True
deps = twine
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
